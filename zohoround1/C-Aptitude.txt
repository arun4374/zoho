
<*/=*/=*/=*/=*/=*/=*/=*/=*/=*/=*/=*/= Cominations of All Important Topics  */=*/=*/=*/=*/=*/=*/=*/=*/=*/=*/=*/=> 


<======= 1 ======>

int main() {
    int i;
    i=1,2,3;
    
    printf("i=%d",i);

    return 0;
}

//  output:  i = 1  ----> first time stored 1 next 2 stored... we can write only single print so first stored element was printed


<======= 2 ======>

int main() {
    int i;
    i=(1,2,3);
    printf("i=%d",i);

    return 0;
}

// output: 3 ---> stored last of the element like 3,  Not lenth

<======= 3 ======>


int main() {
    int c =3,no = 30;
    do{
        no /= c;     
    }while(!c=0);

    printf("%d/n",no);

    return 0;
}

// output: 10->3->1.....n      (infinity loop because while contition only check !c=0 but c value not reduced so c is same value(3) so, this is infinity loop)


<===== 4 =====>


#define pod(a,b) a*b

int main() {
    int x=3,y=4;
    
    printf("%d",pod(x+2,y-1));

    return 0;
}

// output: 10    ---> Basic "BODMAS" rule. First solve bracket then division then multipy and next adition , subraction so, 3+(2*4)-1 = 10


<===== 5 =====>

int main(){
    short i = 65000;
    
    while(i++ !=0);
    printf("%d",i);
}


// output: 1  ---> that is not infinity loop because every data type had a limit like INT_MAX this is maximum of limit so, INT_MAX != 0 but i++ increase i value but already i reach thier max value so again reset the value(0). 


<===== 6 =====>


int main(){
    short i = 6500;
    
    while(i++ !=6500);
    printf("%d",i);
}


// output: 6501  ---> Same at previous questions and Short int value limit is -32767 to 32767.


<==== 7 =====>


int main() 
{
    char str[] = "Arunkumar";
    
    char *s1 = str;
    
    for(int i=0;i<4;i++){
      
      printf("%c\n",*str);
      
      s1++;
    }
    
    return 0;
}

// output: "Arun"   --> str not changed. it will be pointed same value


<===== 8 =====>


int main() 
{
    signed char i =0;
    
    for(;i>=0;i++);
    
    printf("%d",i);
    
    return 0;
}

// output: -128  -->  signed char limit is -128 to 127


<===== 9 =====>


int main() {
    char arr[] = {'a','b'};
    
    char *p = arr;
    
    if(&p == &arr)
        printf("same");
    else
        printf("Not same");

    return 0;
}

// output: "Not same"    --> p denotes pointer of *p  and arr is denotes first element of array


<===== 10 =====>


int main() {
    char arr[] = {'a','b'};
    
    char *p = arr;
    
    if(p == &arr)
        printf("same");
    else
        printf("Not same");

    return 0;
}

// output: " same"    --> p denotes pointer of arr first element and arr is denotes first element of array



<===== 11 =====>


int main() {
    char arr[] = {1,2,3};
    
    char *p = arr;
    
    printf("%d\n",sizeof(p));
    printf("%d\n",sizeof(arr));

    return 0;
}

// output: 8 , 3     --> p denotes first element of the arr, char pointer size is 8 Bytes. basicaly sizeof() return the size of bytes not a length, 1 byte for each char there are 3 char so 1*3=3 therefore sizeof(arr)=3


<==== 12 =====>

int main() {
    int arr[] = {1,2,3};

    char *p = arr;

    printf("%d",sizeof(p));
    printf("%d",sizeof(arr));

    return 0;
}


// output: 8 , 12    --> int values are 4 bytes, otherwise same questions of the previous question.


<===== 13 =====>

int main() {
    int a =1,b=1;
    
    int c = a || --b;
    int d = a-- && --b;
    
    printf("a=%d,b=%d",a,b);
    printf("c=%d,d=%d",c,d);

    return 0;
}

// output: a=0,b=0,c=1,d=0  --> (solve yourself)


<===== 14 =====>


int main() {
    int a =1,b=0;
    
    int c = a || --b;
    int d = a-- && --b;
    
    printf("a=%d,b=%d",a,b);
    printf("c=%d,d=%d",c,d);

    return 0;
}

// output: a=0,b=-1,c=1,d=1


<===== 15 =====>


int main() {
    int x,y=5,z=5;
    
    x = y==z;
    
    printf("x=%d",x);

    return 0;
}

// output: x=1   --> (x=(5==5) so x = true but x was int datatype so x = 1 )


<===== 16 =====>


int main() {
    int x,y=5,z=5;
    
    x += y==z;
    
    printf("x=%d",x);
    return 0;
}

// output: x=1

<===== 17 =====>

int main() {
    char arr[] = "arun";

    printf("%d",sizeof(arr));

    return 0;
}

// output: 5   --> because sizeof() also consider "\0" null terminator. there are 4 char + \0 so, (4*1)+1=5


<===== 18 =====>

int main() {
    char arr[] = "\arun";

    printf("%d",sizeof(arr));

    return 0;
}

// output: 5  --> c not consider "\"

<===== 19 =====>

int main() {
    char arr[] = "geeksforgeeks";
    
    printf("%s",arr+8);
    
    
    return 0;
}

// output: "geeks"   -->  arr+8 was skip first 8 index (0 to 7) then print others

<===== 20 =====>

int main() {
    printf("\"Hello%%World\"");
    
    return 0;
}

// output: "Hello%World"    -->  ' \" ' ==> ' " '   and " %% " ==> " % "